class Ray{
  
  PVector position;
  PVector direction;
  
  
  Ray(PVector _position, float ang){
      this.position = _position;
      this.direction = PVector.fromAngle(ang);
  }
  void look(float x, float y){
    this.position.x  = x-this.position.y;
    this.position.y = y-this.position.x;
  }
  void lookAt(float x, float y) {
    this.direction.x = x - this.position.x;
    this.direction.y = y - this.position.y;
    this.direction.normalize();
  }
  void show(){
    stroke(255);
    
    push();
    translate(position.x, position.y);
    line(0,0,direction.x*10,direction.y*10);
    pop();
  }
  PVector cast(Boundary wall){
    float x1 = wall.a.x;
    float y1 = wall.a.y;
    float x2 = wall.b.x;
    float y2 = wall.b.y;

    float x3 = this.position.x;
    float y3 = this.position.y;
    float x4 = this.position.x + this.direction.x;
    float y4 = this.position.y + this.direction.y;

    float den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    if (den == 0) {
      return null;
    }

    float t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den;
    float u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / den;
    if (t > 0 && t < 1 && u > 0) {
      PVector pt = new PVector();
      pt.x = x1 + t * (x2 - x1);
      pt.y = y1 + t * (y2 - y1);
      return pt;
    } else {
      return null;
    }
  }
}
